const Transaction = require("../schema/schema").Transaction;

const createTransaction = async (req, res) => {
  try {
    const { userID, type, totalMoney, description, date, transactionType } =
      req.body;

    // üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!userID || !type || !totalMoney || !description || !date || !transactionType) {
      return res.status(400).json({
        error: "Transaction thi·∫øu th√¥ng tin. Vui l√≤ng cung c·∫•p ƒë·ªß th√¥ng tin!",
      });
    }

    // üîπ Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn √¢m
    if (totalMoney < 0) {
      return res.status(401).json({ message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }

    // üîπ Ki·ªÉm tra lo·∫°i giao d·ªãch h·ª£p l·ªá
    if (transactionType !== "Income" && transactionType !== "Expense") {
      return res.status(401).json({ message: "Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá" });
    }

    // üîπ Ki·ªÉm tra n·∫øu giao d·ªãch ƒë√£ t·ªìn t·∫°i
    const existTransaction = await Transaction.findOne({
      userID,
      type,
      totalMoney,
      description,
      date,
      transactionType,
    });

    if (existTransaction) {
      return res.status(400).json({ error: "Transaction ƒë√£ t·ªìn t·∫°i" });
    }

    // üîπ L∆∞u giao d·ªãch m·ªõi
    const newTransaction = new Transaction({
      userID,
      type,
      totalMoney,
      description,
      date,
      transactionType,
    });

    await newTransaction.save();
    console.log("L∆∞u giao d·ªãch th√†nh c√¥ng:", newTransaction);
    res.status(201).json(newTransaction);
  } catch (error) {
    console.error("üî• L·ªói trong createTransaction:", error);
    res.status(500).json({ message: error.message });
  }
};

const getExpenseTransactionNow = async(req,res) =>{
  try {
    const { userID } = req.body;
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
    const expenseTransaction = await Transaction.find({ userID, type: "Expense", date: { $gte: startOfDay, $lt: endOfDay } });
    if (expenseTransaction.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ giao d·ªãch n√†o trong ng√†y h√¥m nay." });
    }
    res.status(200).json(expenseTransaction);
    
  }catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch Expense:", error);
    return res.status(500).json({ message: "L·ªói server khi l·∫•y giao d·ªãch Expense" });
  }
}

const totalMoney= async(req,res) =>{
  try{
    const {userID}=req.body;
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
    // T√≠nh t·ªïng ti·ªÅn s·ª≠ d·ª•ng trong th√°ng n·∫øu nh∆∞ l√† income th√¨ c·ªông expense th√¨ tr·ª≠
    const expenseMoney = await Transaction.aggregate([
      { $match: { userID, type: "Expense", date: { $gte: startOfDay, $lt: endOfDay } } },
      { $group: { _id: null, totalMoney: { $sum: "$totalMoney" } } }
    ]);
    const incomeMoney = await Transaction.aggregate([
      { $match: { userID, type: "Income", date: { $gte: startOfDay, $lt: endOfDay } } },
      { $group: { _id: null, totalMoney: { $sum: "$totalMoney" } } }
    ]);
    const totalMoney = incomeMoney[0]?.totalMoney - expenseMoney[0]?.totalMoney || 0;
    res.status(200).json({ totalMoney });
  }
  catch (error) {
    console.error("L·ªói khi t√≠nh t·ªïng ti·ªÅn:", error);
    return res.status(500).json({ message: "L·ªói server khi t√≠nh t·ªïng ti·ªÅn" });
  }
}

const getIncomeTransactionNow = async(req,res) =>{
  try {
    const { userID } = req.body;
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
    const expenseTransaction = await Transaction.find({ userID, type: "Income", date: { $gte: startOfDay, $lt: endOfDay } });
    if (expenseTransaction.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ giao d·ªãch n√†o trong ng√†y h√¥m nay." });
    }
    res.status(200).json(expenseTransaction);
    
  }catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch Expense:", error);
    return res.status(500).json({ message: "L·ªói server khi l·∫•y giao d·ªãch Expense" });
  }
}

const totalMoneyIncome = async(req,res) =>{
  try{
    const {userID}=req.body;
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
    // T√≠nh t·ªïng ti·ªÅn Income
    const incomeMoney = await Transaction.aggregate([
      { $match: { userID, type: "Income", date: { $gte: startOfDay, $lt: endOfDay } } },
      { $group: { _id: null, totalMoney: { $sum: "$totalMoney" } } }
    ]);
    const totalMoney = incomeMoney[0]?.totalMoney || 0;
    res.status(200).json({ totalMoney });
  }catch (error) {
    console.error("L·ªói khi t√≠nh t·ªïng ti·ªÅn:", error);}}

const totalMoneyExpense = async(req,res) =>{
  try{
    const {userID}=req.body;
    const today = new Date();
    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
    // T√≠nh t·ªïng ti·ªÅn Expense
    const expenseMoney = await Transaction.aggregate([
      { $match: { userID, type: "Expense", date: { $gte: startOfDay, $lt: endOfDay } } },
      { $group: { _id: null, totalMoney: { $sum: "$totalMoney" } } }
    ]);
    const totalMoney = expenseMoney[0]?.totalMoney || 0;
    res.status(200).json({ totalMoney });
  }catch (error) {
    console.error("L·ªói khi t√≠nh t·ªïng ti·ªÅn:", error);
    return res.status(500).json({ message: "L·ªói server khi t√≠nh t·ªïng ti·ªÅn" });
  }
}

const editTransaction = async (req, res) => {
  try {
    const { userID, _id, type, totalMoney, description, date, transactionType } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (totalMoney < 0) {
      return res.status(400).json({ message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }
    if (!["Income", "Expense"].includes(transactionType)) {
      return res.status(400).json({ message: "Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra giao d·ªãch c√≥ t·ªìn t·∫°i kh√¥ng
    const transaction = await Transaction.findOne({ userID, _id });
    if (!transaction) {
      return res.status(404).json({ message: "Giao d·ªãch kh√¥ng t·ªìn t·∫°i" });
    }

    // C·∫≠p nh·∫≠t giao d·ªãch v√† l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    const updatedTransaction = await Transaction.findOneAndUpdate(
      { userID, _id },
      { type, totalMoney, description, date, transactionType },
      { new: true } // Tr·∫£ v·ªÅ d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    );

    res.status(200).json(updatedTransaction);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


const getTransaction = async (req, res) => {
  try {
    const transaction = await Transaction.find();
    res.status(200).json(transaction);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getExpenseTransaction = async (req, res) => {
  try {
    const transactions = await Transaction.find({ transactionType: "Expense" });
    return res.status(200).json(transactions);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch Expense:", error);
    return res.status(500).json({ message: "L·ªói server khi l·∫•y giao d·ªãch Expense" });
  }
};

const getIncomeTransaction = async (req, res) => {
  try {
    const transactions = await Transaction.find({ transactionType: "Income" });
    return res.status(200).json(transactions);
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch Income:", error);
    return res.status(500).json({ message: "L·ªói server khi l·∫•y giao d·ªãch Income" });
  }
};

const getTransactionByMonth = async (req, res) => {
  try {
    const { month, year } = req.body;

    if (!month || !year) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng cung c·∫•p th√°ng v√† nƒÉm h·ª£p l·ªá." });
    }

    // Chuy·ªÉn ƒë·ªïi th√†nh ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa th√°ng
    const startDate = new Date(year, month - 1, 1); // Ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng
    const endDate = new Date(year, month, 1); // Ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng ti·∫øp theo

    // T√¨m t·∫•t c·∫£ giao d·ªãch trong kho·∫£ng th·ªùi gian ƒë√≥
    const transactions = await Transaction.find({
      date: { $gte: startDate, $lt: endDate },
    });

    if(transactions.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ giao d·ªãch n√†o trong th√°ng n√†y." });
    }

    res.status(200).json(transactions);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getTransactionUser = async (req, res) => {
  const userID = req.body.userID;
  if(!userID) {
    return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng." });
  }
  try {
    const transaction = await Transaction.find({ userID: userID });
    if(transaction.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ giao d·ªãch n√†o cho ng∆∞·ªùi d√πng n√†y." });
    }
    res.status(200).json(transaction);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

module.exports = {
  createTransaction,
  editTransaction,
  getTransactionUser,
  getTransaction,
  getExpenseTransaction,
  getIncomeTransaction,
  getTransactionByMonth,
  getExpenseTransactionNow,
  getIncomeTransactionNow,
  totalMoney,
  totalMoneyIncome,
  totalMoneyExpense,
};
